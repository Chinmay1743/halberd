#!/usr/bin/env python
# -*- coding: iso-8859-1 -*-

# Copyright (C) 2004 Juan M. Bello Rivas <rwx@synnergy.net>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA


"""Command line interface and main driving module.
"""

__revision__ = '$Id: halberd,v 1.5 2004/01/31 13:57:48 rwx Exp $'


import sys


# Time to spend probing the target expressed in seconds.
_DEFAULT_SCANTIME = 30
# Number of sockets to create at each scanning round.
_DEFAULT_SOCKETS = 3


class Halberd:
    """Container for all the information needed to perform a scan.
    """
    def __init__(self):
        """Initializes halberd object.
        """
        self.address = ''
        self.url = ''
        self.clues = []
        self.hits = 0

        self.scanner = None
        self.analyzer = None


def fatal(msg):
    """Fatal error notification.
    """
    sys.stderr.write(str(msg))
    sys.stderr.flush()
    sys.exit(-1)

def get_address(url, address, verbose):
    """Extract an IP address to scan.
    """
    import urlparse
    import socket

    netloc = urlparse.urlparse(url)[1]
    hostname = netloc.split(':')[0]

    try:
        name, aliases, addresses = socket.gethostbyname_ex(hostname)
    except socket.gaierror, msg:
        fatal('%s (%s)\n' % (msg[1], hostname))

    if address:
        if address not in addresses:
            fatal('%s resolves to a different address than %s\n'
                  % (hostname, address))
        else:
            return address  # Address found in the valid address list.

    # Pick up a valid address from the given list.
    if len(addresses) > 1 and verbose:
        sys.stdout.write('warning: %s resolves to the following addresses:\n'
                         % hostname)
        sys.stdout.write('  %s <-- using this one.\n' % addresses[0])
        for addr in addresses[1:]:
            sys.stdout.write('  %s\n' % addr)

    return addresses[0]


def main(argv):
    """http load balancer detector's main routine.
    """
    import optparse
    from hlbd import version

    parser = optparse.OptionParser(usage='%prog [options] url',
                                   version=version.version.v_gnu)
    parser.add_option('-t', '--time',
                      action='store', type='int', dest='scantime',
                      help='time (in seconds) to spend analyzing the target',
                      metavar='NUM', default=_DEFAULT_SCANTIME)
    parser.add_option('-s', '--sockets',
                      action='store', type='int', dest='sockets',
                      help='number of sockets to use in parallel',
                      metavar='NUM', default=_DEFAULT_SOCKETS)
    parser.add_option('-v', '--verbose', action='store_true', dest='verbose',
                      help='explain what is being done', default=False)
    parser.add_option('-o', '--output', action='store', dest='output',
                      help='write output to the specified file',
                      metavar='FILE', default='')
    parser.add_option('-a', '--address', action='store', dest='address',
                      help='specify address to scan',
                      metavar='ADDR', default='')
    parser.add_option('-r', '--record', action='store', dest='savefile',
                      help='keeps a record of clues in the specified file',
                      metavar='FILE', default='')

    (opts, args) = parser.parse_args(argv)

    if len(args) < 1:
        # We must have an URL to scan.
        parser.error('incorrect number of arguments')

    if opts.verbose:
        print '%s\nhttp load balancer detector\n' % version.version.v_gnu 

    halberd = Halberd()

    # Ensures the URL is a valid one.
    make_url = lambda url, base: (url.startswith(base) and url) or (base + url)
    halberd.url = make_url(args[0], 'http://')

    # Go through the reconnaissance stage.
    from hlbd import scanlib
    halberd.address = get_address(halberd.url, opts.address, opts.verbose)
    
    scanner = scanlib.Scanner(opts.scantime, opts.sockets, opts.verbose)

    halberd.clues, halberd.hits = scanner.scan(halberd.address, halberd.url)

    if len(halberd.clues) > 0:
        # Analyze results.
        from hlbd import cluelib, reportlib

        if opts.savefile:
            # Save unprocessed clues to a file if requested.
            cluelib.save_clues(opts.savefile, halberd.clues)

        clues = cluelib.analyze(halberd.clues)
        # Print the report.
        reportlib.report(halberd.address, clues, halberd.hits, opts.output)

if __name__ == '__main__':
    main(sys.argv[1:])


# vim: ts=4 sw=4 et
