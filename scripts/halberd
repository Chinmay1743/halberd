#!/usr/bin/env python
# -*- coding: iso-8859-1 -*-

"""Command line interface.
"""
__revision__ = '$Id: halberd,v 1.23 2004/03/29 10:36:56 rwx Exp $'

# Copyright (C) 2004 Juan M. Bello Rivas <rwx@synnergy.net>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA


import sys

import hlbd.shell
import hlbd.version as version


def make_parser():
    """Sets up the command line option parser.
    """
    import optparse

    parser = optparse.OptionParser(usage='%prog [options] url',
                                   version=version.version.v_gnu)
    parser.add_option('-t', '--time',
                      action='store', type='int', dest='scantime',
                      help='time (in seconds) to spend scanning the target',
                      metavar='NUM', default=hlbd.shell.default_scantime)

    parser.add_option('-v', '--verbose', action='store_true', dest='verbose',
                      help='explain what is being done', default=False)

    parser.add_option('-o', '--out', action='store', dest='output',
                      help='write output to the specified file',
                      metavar='FILE', default='')

    parser.add_option('-a', '--addr', action='store', dest='addr',
                      help='specify address to scan',
                      metavar='ADDR', default='')

    parser.add_option('-w', '--write', action='store', dest='savefile',
                      help='saves clues to the specified file or directory',
                      metavar='FILE', default='')
    parser.add_option('-r', '--read', action='store', dest='cluefile',
                      help='loads clues from the specified file',
                      metavar='FILE', default='')

    parser.add_option('-s', '--server', action='store_true', dest='rpc_server',
                      help='run as scan server')
    parser.add_option('-c', '--client', action='store_true', dest='rpc_client',
                      help='run as scan cilent')

    parser.add_option('-p', '--parallelism', action='store', type='int',
                      dest='parallelism',
                      help='specifies the degree of parallelism',
                      metavar='NUM', default=hlbd.shell.default_parallelism)

    parser.add_option('', '--config', action='store', dest='confname',
                      help='use configuration file', metavar='FILE',
                      default=hlbd.shell.default_conf_file)

    parser.add_option('-u', '--urlfile', action='store', dest='urlfile',
                      help='read URLs from FILE', metavar='FILE')

    return parser


def scannerFactory(opts, args):
    """Instantiates a scanner of the appropriate flavour.

    It selects which scanning strategy to follow depending on how the user
    invoked the program.
    """
    scan_options = {
        'scantime': opts.scantime,
        'parallelism': opts.parallelism,
        'verbose': opts.verbose,
        'conf_file': opts.confname,
    }

    if opts.urlfile:
        # MultiScan
        scan_options.update({'urlfile': opts.urlfile})
        if opts.rpc_client:
            scanner = hlbd.shell.DistMultiScan
        else:
            scanner = hlbd.shell.MultiScan
    else:
        # UniScan
        scan_options.update({'url': args[0], 'addr': opts.addr})
        if opts.rpc_client:
            scanner = hlbd.shell.DistUniScan
        else:
            scanner = hlbd.shell.UniScan

    return scanner(**scan_options)


def main(argv):
    """Command line interface.
    """
    parser = make_parser()

    (opts, args) = parser.parse_args(argv)

    print version.version.v_gnu
    print 'http load balancer detector'
    print

    if opts.cluefile:
        # Run as reader/analyzer.
        import hlbd.clues.file

        halberd = hlbd.shell.Halberd()
        halberd.clues = hlbd.clues.file.load(opts.cluefile)
        halberd.analyze()
        halberd.report(opts.output)
        sys.exit(0)
    elif opts.rpc_server:
        # Run as server.
        import hlbd

        halberd = hlbd.shell.Halberd()
        halberd.readConf(opts.confname)
        halberd.server()
        sys.exit(0)
    else:
        # Run as scanner.
        if opts.urlfile is None and len(args) < 1:
            # We need an URL to scan.
            parser.error('incorrect number of arguments')

        scanner = scannerFactory(opts, args)
        scanner.run(opts.savefile, opts.output)


if __name__ == '__main__':
#    import gc
#    gc.set_debug(gc.DEBUG_LEAK)
    main(sys.argv[1:])


# vim: ts=4 sw=4 et
