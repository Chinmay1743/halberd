#!/usr/bin/env python
# -*- coding: iso-8859-1 -*-

# Copyright (C) 2004 Juan M. Bello Rivas <rwx@synnergy.net>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA


"""Command line interface and main driving module.
"""

__revision__ = '$Id: halberd,v 1.21 2004/03/26 00:48:30 rwx Exp $'


import sys

from hlbd.shell import *
import hlbd.clues.file
import hlbd.version as version


def make_parser():
    """Sets up the command line option parser.
    """
    import optparse

    parser = optparse.OptionParser(usage='%prog [options] url',
                                   version=version.version.v_gnu)
    parser.add_option('-t', '--time',
                      action='store', type='int', dest='scantime',
                      help='time (in seconds) to spend scanning the target',
                      metavar='NUM', default=default_scantime)

    parser.add_option('-v', '--verbose', action='store_true', dest='verbose',
                      help='explain what is being done', default=False)

    parser.add_option('-o', '--out', action='store', dest='output',
                      help='write output to the specified file',
                      metavar='FILE', default='')

    parser.add_option('-a', '--addr', action='store', dest='addr',
                      help='specify address to scan',
                      metavar='ADDR', default='')

    parser.add_option('-w', '--write', action='store', dest='savefile',
                      help='saves clues to the specified file',
                      metavar='FILE', default='')
    parser.add_option('-r', '--read', action='store', dest='cluefile',
                      help='loads clues from the specified file',
                      metavar='FILE', default='')

    parser.add_option('-s', '--server', action='store_true', dest='rpc_server',
                      help='run as scan server')
    parser.add_option('-c', '--client', action='store_true', dest='rpc_client',
                      help='run as scan cilent')

    parser.add_option('-p', '--parallelism', action='store', type='int',
                      dest='parallelism',
                      help='specifies the degree of parallelism',
                      metavar='NUM', default=default_parallelism)

    parser.add_option('', '--config', action='store', dest='confname',
                      help='use configuration file', metavar='FILE',
                      default=default_conf_file)

    return parser


def main(argv):
    """Command line interface.
    """
    parser = make_parser()

    (opts, args) = parser.parse_args(argv)

    halberd = Halberd(opts.verbose)

    halberd.info('%s\nhttp load balancer detector\n\n' % version.version.v_gnu)

    halberd.readConf(opts.confname)

    if opts.cluefile:
        # Load from file
        halberd.clues = hlbd.clues.file.load(opts.cluefile)
        halberd.analyze()
        halberd.report(opts.output)
        sys.exit(0)
    elif opts.rpc_server:
        halberd.server()
        sys.exit(0)

    # Scan target.
    if len(args) < 1:
        # We need an URL to scan.
        parser.error('incorrect number of arguments')

    halberd.setURL(args[0])
    halberd.scantime = opts.scantime
    halberd.parallelism = opts.parallelism

    # Get network addresses.
    if opts.addr:
        # The user passed a specific address as a parameter.
        addrs = [opts.addr]
    else:
        host = hostname(halberd.url)
        halberd.info('looking up host %s... ' % host)
        addrs = addresses(host)
        if not addrs:
            Halberd.fatal('unable to resolve %s\n' % host)
        halberd.info('done.\n\n')
        addrs.sort()

    for addr in addrs:
        halberd.setAddr(addr)

        if opts.rpc_client:
            halberd.client()
        else:
            halberd.scan()

        halberd.analyze()

        halberd.report(opts.output)

    if opts.savefile:
        if len(addrs) > 1:
            halberd.info('warning: only the last clues will be stored\n')
        hlbd.clues.file.save(opts.savefile, halberd.clues)


if __name__ == '__main__':
#    import gc
#    gc.set_debug(gc.DEBUG_LEAK)
    main(sys.argv[1:])


# vim: ts=4 sw=4 et
